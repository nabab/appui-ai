(() => {
  const tooltips = [{
    name: "infoTemperature",
    title: bbn._("Temperature"),
    icon: "nf nf-fa-thermometer",
    items: [{
      text: bbn._("What it does"),
      content: bbn._("Controls the randomness of the generated text.")
    }, {
      text: bbn._("How It Works"),
      content: bbn._("Adjusts the probability distribution of the next word in the text.")
    }, {
      text: bbn._("Benefits"),
      content: bbn._("Higher temperature makes the text more creative and varied, while lower temperature makes it more predictable and focused.")
    }, {
      text: bbn._("Control"),
      content: bbn._("Adjust the temperature value to balance between creativity and coherence.")
    }, {
      text: bbn._("Use Cases"),
      content: bbn._("Useful for creative writing, brainstorming, and generating diverse content.")
    }],
    summary: bbn._("In short, temperature helps AI models generate text that is either more creative or more focused, depending on the setting.")
  }, {
    name: "infoTopP",
    title: bbn._("Top_p (Nucleus Sampling)"),
    icon: "nf nf-fa-filter",
    items: [{
      text: bbn._("What it does"),
      content: bbn._("Helps language models generate diverse and coherent text.")
    }, {
      text: bbn._("How It Works"),
      content: bbn._("The model picks words from a dynamic list of top options, based on a probability threshold (p).")
    }, {
      text: bbn._("Benefits"),
      content: bbn._("Makes the text more natural and less repetitive.")
    }, {
      text: bbn._("Control"),
      content: bbn._("Adjust the p value to change how creative or focused the text is.")
    }, {
      text: bbn._("Use Cases"),
      content: bbn._("Great for writing, chatbots, and content creation.")
    }],
    summary: bbn._("In short, top_p makes the text generated by AI models more varied and human-like.")
  }, {
    name: "infoFrequency",
    title: bbn._("Frequency penalty"),
    icon: "nf nf-fa-sort_amount_up",
    items: [{
      text: bbn._("What it does"),
      content: bbn._("Reduces repetition in generated text.")
    }, {
      text: bbn._("How It Works"),
      content: bbn._("Applies a penalty to words that have already appeared frequently.")
    }, {
      text: bbn._("Benefits"),
      content: bbn._("Makes the text more diverse and less repetitive.")
    }, {
      text: bbn._("Control"),
      content: bbn._("Adjust the penalty value to control how much repetition is allowed.")
    }, {
      text: bbn._("Use Cases"),
      content: bbn._("Useful for creative writing, chatbots, and content generation.")
    }],
    summary: bbn._("In short, the frequency penalty helps AI models avoid repeating the same words or phrases too often.")
  }, {
    name: "infoPresence",
    title: bbn._("Presence penalty"),
    icon: "nf nf-fa-ban",
    items: [{
      text: bbn._("What it does"),
      content: bbn._("Discourages the use of certain words or topics.")
    }, {
      text: bbn._("How It Works"),
      content: bbn._("Applies a penalty to specific words or topics to reduce their likelihood of appearing in the text.")
    }, {
      text: bbn._("Benefits"),
      content: bbn._("Helps steer the conversation away from unwanted topics.")
    }, {
      text: bbn._("Control"),
      content: bbn._("Adjust the penalty value to control how strongly certain words or topics are avoided.")
    }, {
      text: bbn._("Use Cases"),
      content: bbn._("Useful for chatbots, customer support, and content moderation.")
    }],
    summary: bbn._("In short, the presence penalty helps AI models avoid using specific words or discussing certain topics.")
  }];

  return {
    mixins: [bbn.cp.mixins.basic],
    statics() {
      const ret = {};
      bbn.fn.each(tooltips, t => {
        ret[t.name] = `
<div class="bbn-padding">
  <h3 class="bbn-c">${t.title}</h3>
  <ul>`;
        bbn.fn.each(t.items, i => ret[t.name] += `
    <li>
      <strong>${i.text}:</strong> 
      ${i.content}
    </li>`);
        ret[t.name] += `
  </ul>
  <p>
    ${t.summary}
  </p>
</div>
`;
      });
      return {tooltips: ret};
    },
    props: {
      source: {
        type: Object,
        required: true
      },
      endpoints: {
        type: Array,
        required: true
      },
      formats: {
        type: Array,
        required: true
      },
      languages: {
        type: Array
      },
      mode : {
        type: String
      }
    },
    data() {
      return {
        showBar2: false,
      }
    },
    computed: {
      currentEndpoint() {
        if (this.source.endpoint) {
          return bbn.fn.getRow(this.endpoints, {id: this.source.endpoint})
        }

        return null;
      },
      currentModel() {
        if (this.source.endpoint && this.source.model) {
          return bbn.fn.getRow(this.currentEndpoint.models, {id: this.source.model});
        }

        return null;
      },
    },
    methods: {
      getTooltip(name) {
        return this.constructor.tooltips[name];
      },
      saveCfg() {
        this.getPopup({
          component: 'appui-ai-config-saver',
          componentOptions: {
            source: this.source
          }
        });
      },
    },
  };
})();
